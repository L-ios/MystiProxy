name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-archive:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
#          - os: ubuntu-24.04
#            target: wasm32-unknown-emscripten
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
#          - os: windows-latest
#            target: x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v4
      - name: Get Git Commit ID
        id: git_commit
        run: echo "GIT_COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}
      - name: Install musl-tools (if needed)
        if: matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools upx
      - name: Install Emscripten (if needed)
        if: matrix.target == 'wasm32-unknown-emscripten'
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          echo "EMSDK_ENV=$(pwd)/emsdk_env.sh" >> $GITHUB_ENV
      - name: Source Emscripten environment (if needed)
        if: matrix.target == 'wasm32-unknown-emscripten'
        run: source ${{ env.EMSDK_ENV }}
      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}
      - name: Strip Binary (if not wasm)
        if: matrix.target != 'wasm32-unknown-emscripten'
        run: |
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -executable -exec strip {} \;
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -executable -exec upx --best {} \;
      - name: Archive Release Build as ZIP
        run: |
          cd target/${{ matrix.target }}/release
          if [ "$RUNNER_OS" == "Windows" ]; then
            Compress-Archive -Path mystiproxy.exe -DestinationPath mystiproxy-${{ matrix.target }}-${{ env.GIT_COMMIT_ID }}.zip
          else
            zip -r mystiproxy-${{ matrix.target }}-${{ env.GIT_COMMIT_ID }}.zip $(find . -maxdepth 1 -type f -executable)
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mystiproxy-${{ matrix.target }}-${{ env.GIT_COMMIT_ID }}.zip
          path: target/${{ matrix.target }}/release/mystiproxy-${{ matrix.target }}-${{ env.GIT_COMMIT_ID }}.zip
