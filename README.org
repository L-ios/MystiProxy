* 微服务模拟器 （Mystiproxy）

  主要解决，服务迁移到，导致一系列调试，中间态的问题，验证方式，一开始主要是为了观察docker等以uds文件进行通行的应用
* 主要功能
  #+begin_src plantuml
    @startmindmap
    ,* MystiProxy
    ,** 监听方式
    ,*** tcp
    ,*** uds
    ,** 对外提供的能力
    ,*** 4 层 socket 转发
    ,*** 7 层 http 转发
    ,** 通道鉴权能力
    ,*** 4 层 tls
    ,**** 单向鉴权
    ,**** 双向鉴权
    ,*** 7 层鉴权
    ,**** 提供登录页面
    ,**** header 鉴权
    ,***** auth
    ,***** jwt

    ,* http 转发能力
    ,** proxy 能力
    ,** 静态私服
    ,** dav文件服务看
    ,** 请求mock
    ,*** 提供healthcheck
    ,*** 根据条件mock
    ,** 网关能力
    ,*** /abc 映射为 /
    ,*** /a/b/c 映射为 /a/c/b

    ,* mock能力

    ,* 网关能力
    @endmindmap
  #+end_src
  1. 用于转发4层协议
     - tcp
     - udp 可能存在问题，例如丢包
     - uds
  2. 转发7层协议
     - http(s)，单向认证，忽略认证，以及双向认证 其中https可以提供双向tls认证，忽略认证
  3. http(s) 上的能力
     - 将 目录 作为静态资源进行代理
       - uri转换为具体的目录
       - _/static/_ 需要检索 ~/static/index.html~ 或 ~/static/index.html~ 并进行响应
     - 对请求进行mock
     - 对请求进行 proxy 代理，代理请求，也就将入口请求，转换后，通过 httpclient 请求目标地址，再将其结果进行返回
       - 目标地址可以是 Mystipxoy 监听的地址
       - 目标地址也可是 其它服务 监听的地址
  4. 请求的转换
     http 入口请求如何转换为 目标的地址的请求

     1. uri的转换
        - 不做处理
        - 直接转换
        - 匹配前缀后，修改前缀，或者删除前缀 *前缀匹配* 一定以'/'结尾
        - 参数化的匹配，将参数透穿
        - 前缀参数化，将前缀参数透传
     2. header的处理，【可以提供一些conditon，用于条件的匹配，并执行一下的操作】
        - 增加header【达到某种条件后再删除，默认为没有才增加】
        - 强制替换header 【达到某种条件后再替换，默认为直接替换】
        - 删除header 【达到某种条件后再删除，默认为直接删除】
     3. body的处理
        借用**模版引擎，将body的处理能力 plus 化，主要只针对 ~Content-type: application/json~ 类型的body进行处理
        现有可能是调用其它 请求 对uri中的一些内容进行特殊化处理
  5. 响应的转换，具体能力和请求的转换类似
     目标地址的响应如何转化为 被代理客户端想要的请求
  6. 对响应进行mock
     1. 匹配请求后，直接响应内容
     2. 匹配到 URI ，直接响应
     3. 根据条件匹配到响应
     4. 对需要mock的响应进行特殊处理，或者说是加密处理
* 4 层协议转发
  主要是打通通信端点之间的网络隔离，其中增加 ip 隔离的能力
* feature [0%]
  - [ ] 启动时不检测目标url是否可达，
  - [ ] 4层协议的转发，主要集中在 socket 流上 [0%]
    |      | 目标 | tcp | udp | uds |
    |------+------+-----+-----+-----|
    | 监听 | [\]  | [*] | [ ] | [*] |
    |------+------+-----+-----+-----|
    | tcp  | [*]  | [ ] | [ ] | [ ] |
    | udp  | [ ]  | [ ] | [ ] | [ ] |
    | uds  | [*]  | [ ] | [ ] | [ ] |
    - [ ] tcp://ip:port
    - [ ] udp://ip:port
    - [ ] unix://file
    - [ ] 根据请求的ip过滤请求，或者拒绝连接
  - [ ] 7层协议的转发，主要是将 socket 流解析为 http 协议 [0%]
    - [ ] http://ip:port
    - [ ] https://ip:port
    - [ ] unix+http:///run/var/unix/http.sock
    - [ ] unix+https:///run/var/unix/https.sock [fn:1]
    - [ ] https协议的监听
    - [ ] 双向认证的https协议的监听
  - [ ] http 内容的解析 [0%]
    - [ ] uri的处理
    - [ ] header 的处理
    - [ ] body 的处理
  - [ ] uri-mapping 路由映射，路由映射主要提供4中模式
    - Full :: 全路径匹配
    - Prefix :: 前缀匹配
    - Regex :: 带参数的正则匹配
    - PrefixRegex :: 带正则的前缀匹配
    #+begin_src text
      当baseUri = /时，in_uri = /a/b/c时，返回Some(Prefix)
      当baseUri = /a/b/c时，in_uri = /a/b/c/d/e时，返回Some(Prefix)
      当baseUri = /a/b/c时，in_uri = /a/b/c时，返回Some(Full)
      当baseUri = /a/{id}/c时，in_uri = /a/b/c时，返回Some(Regex)，其中{id}是参数，匹配inUri中的b
      当baseUri = /a/{id}/c时，in_uri = /a/b/c/d/e时，返回Some(PrefixRegex)，其中{id}是参数，匹配inUri中的b
      当baseUri = /a/{id}/c时，in_uri = /a/b/d/e/f时，返回None
    #+end_src
  - [ ] mock响应，主要是根据请求中某些内容，直接进行响应，或者处理响应后再响应 [0%]
    - [ ] 根据请求中的URI，进行响应
    - [ ] 根据请求头，进行响应
    - [ ] 根据请求body，进行响应
      - [ ] body 获取是uri中的query部分
      - [ ] query 型的body 进行匹配周响应
    - [ ] 提供body模版，然后特殊处理后，再进行响应
      - 例如结合一些请求转发的能力，将mock的能力进行提升

* 配置文件结构
#+begin_src plantuml
  @startyaml
  mysti:
    engine:
      docker:
        listen: tcp://0.0.0.0:3128
        target: unix:///var/run/docker.sock
        proxy_type: http # tcp
        timeout: 10s
        header:
          Host:
            value: localhost
            action: 'overwrite' # 默认就是overwrite
            condition: '' # 默认值为true，如果编写，则结果为true后，才能执行
        locations:
          # 采用网管的形式进行匹配，优先前缀匹配
          - location: '/a/b'
            mode: Prefix # 默认采用 【5. 前缀匹配 => Prefix】，支持【1. 全量匹配 => Exact】，【3. 正则匹配 => Regex】，【4. 变量前缀匹配=>VariablePrefix】，【2. 变量形式匹配=>Variable】

            response:
              status: 200
              headers:
                test:
                  value: good
              body:
                type: static
                alias: 'bbb'
          request:
            type: static
          request:
            method: 'get'
            uri: # 可能需要定义为uriMapping
              path: '/a/c'
              query: 'a=b&c=d'
            headers:
              Host:
                value: localhost
                action: 'overwrite' # 默认值，强制复写
                condition: '' # 条件，为true才会执行
              forward-host:
                value: localhost
                action: 'missed' # 缺少，则添加
              x-host:
                action: 'forceDelete' # 有就删除
            body: # 只支持json，并使用jsonpath进行处理
              json:
                 path: '$.name'
                 value: 'test'
                 action: 'overwrite'
                 condition: ''
          response:
            headers:
              Host:
                value: localhost
                action: 'overwrite' # 默认值，强制复写
                condition: '' # 条件，为true才会执行
            body:
              json:
                '$.name':
                  value: 'test'
                  action: 'overwrite'
                  condition: ''
      containerd:
        listen: tcp://0.0.0.0:3128
        target: tcp://127.0.0.1:2765
        proxy_type: tcp

  # 证书 单独声明,engine中进行引用啊
  cert:
    - name: client1
      root_key: ""
    - {}
  @endyaml
#+end_src
#+begin_src plantuml
  @startyaml
  - location: /a/b/c
    mode: Prefix
    provider: static # 静态私服
    alias: /var/www/html/
  - location: /a/b/d # 多种匹配模式，估计才行
    provider: mock
    condition:
      - a: b
      - b: c
    - path: /a/b/d # 全量匹配
      query: a=b&c=d # 需要动态匹配
      method: get # 固定匹配
      header:
        auth:
          value: good
          condition: xxxx
  @endyaml
#+end_src
#+begin_src plantuml
  @startjson
  [
    {
      "method": "GET,POST,put,*",
      "mode": "Full",
      "service": "test",
      "target_protocol": "http",
      "target_service": "test",
      "target_uri": "http://127.0.0.1:8080",
      "uri": "/test",
      "var_pattern": "test"
    },
      {
      "method": "GET,POST,put,*",
      "mode": "Full",
      "service": "test",
      "target_protocol": "http",
      "target_service": "test",
      "target_uri": "http://127.0.0.1:8080",
      "uri": "/test",
      "var_pattern": "test"
    }
  ]
  @endjson
#+end_src
* Footnotes

[fn:1] unix中也可以传输 https 协议的内容，https，主要是tcp socket上将其通过tls进行加密
